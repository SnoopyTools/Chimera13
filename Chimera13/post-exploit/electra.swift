//
//  electra.swift
//  Chimera13
//
//  Created by CoolStar on 3/1/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation

enum JAILBREAK_RETURN_STATUS {
    case ERR_NOERR
    case ERR_VERSION
    case ERR_EXPLOIT
    case ERR_UNSUPPORED
    case ERR_TFP0
    case ERR_ALREADY_JAILBROKEN
    case ERR_ROOTFS_RESTORE
    case ERR_REMOUNT
    case ERR_SNAPSHOT
    case ERR_JAILBREAK
    case ERR_CONFLICT
}

class Electra {
    private let tfp0: mach_port_t
    private let any_proc: UInt64
    private let enable_tweaks: Bool
    private let restore_rootfs: Bool
    private let nonce: String
    
    private let offsets = Offsets.shared
    
    private var all_proc: UInt64 = 0
    
    private var our_proc: UInt64 = 0
    private var launchd_proc: UInt64 = 0
    private var kernel_proc: UInt64 = 0
    
    private var our_task_addr: UInt64 = 0
    private var our_ubcinfo: UInt64 = 0
    
    private var root_vnode: UInt64 = 0
    
    public init(tfp0: mach_port_t, any_proc: UInt64, enable_tweaks: Bool, restore_rootfs: Bool, nonce: String){
        self.tfp0 = tfp0
        self.any_proc = any_proc
        self.enable_tweaks = enable_tweaks
        self.restore_rootfs = restore_rootfs
        self.nonce = nonce
    }
    
    private func populate_procs(){
        let our_pid = getpid()
        var proc = any_proc
        while proc != 0 {
            if (rk64(rk64(proc + 8)) != proc){
                print("Reached end of list")
                print(String(format:"Allproc? 0x%llx", proc))
                all_proc = proc
                break
            }
            proc = rk64(proc + 8)
        }
        
        proc = rk64(all_proc)
        while proc != 0 {
            let pid = rk32(proc + offsets.proc.pid)
            if (pid == 0){
                kernel_proc = proc
                print(String(format:"kern proc: 0x%llx", proc))
            } else if (pid == our_pid){
                print("found our pid")
                
                our_proc = proc
                our_task_addr = rk64(proc + offsets.proc.task)
            } else if (pid == 1){
                print("found launchd")
                
                launchd_proc = proc
            }
            proc = rk64(proc)
        }
    }
    
    private func getRoot() -> JAILBREAK_RETURN_STATUS{
        let kern_ucred = rk64(kernel_proc + offsets.proc.ucred)
        let self_ucred = rk64(our_proc + offsets.proc.ucred)
        
        our_ubcinfo = rk64(self_ucred + UInt64(0x78))
        wk64(self_ucred + UInt64(0x78), rk64(kern_ucred + UInt64(0x78)))
        wk64(self_ucred + UInt64(0x20), UInt64(0))
        
        setuid(0)
        setuid(0)
        
        guard (getuid() == 0) else {
            return .ERR_JAILBREAK
        }
        return .ERR_NOERR
    }
    
    private func cleanupCreds() {
        let self_ucred = rk64(our_proc + offsets.proc.ucred)
        wk64(self_ucred + UInt64(0x78), our_ubcinfo)
        
        setuid(501)
    }
    
    public func jailbreak() -> JAILBREAK_RETURN_STATUS {
        print("Starting Electra...")
        guard (tfp0 != MACH_PORT_NULL) else {
            return .ERR_TFP0
        }
        
        var err: JAILBREAK_RETURN_STATUS = .ERR_NOERR
        
        populate_procs()
        
        print(String(format: "our proc is at 0x%016llx", our_proc))
        print(String(format: "kern proc is at 0x%016llx", kernel_proc))
        
        err = getRoot()
        if (err != .ERR_NOERR){
            return err
        }
        
        print(String(format: "our uid is %d", getuid()))
        
        let remount = Remount(our_proc: our_proc, kernel_proc: kernel_proc)
        /*let rootvnode = remount.findRootVnode(launchd_proc: launchd_proc)
        remount.mountRealRootfs(rootvnode: rootvnode)
        let newmnt = remount.findNewMount(rootvnode: rootvnode)
        remount.unsetSnapshotFlag(newmnt: newmnt)*/
        
        let nvram = NVRamUtil()
        nvram.setNonce()
        
        cleanupCreds()
        return err
    }
}
