//
//  offsets.swift
//  Chimera13
//
//  Created by CoolStar on 3/1/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation

class Offsets {
    static let shared = Offsets()
    public struct procOffsets {
        let pid = UInt64(0x68)
        let task = UInt64(0x10)
        let ucred = UInt64(0x100)
        
        let textvp = UInt64(0x238)
        let textoff = UInt64(0x240)
        
        let name = UInt64(0x250)
        let csflags = UInt64(0x298)
        
    }
    let proc = procOffsets()
    
    public struct taskOffsets {
        let lck_mtx_type = UInt64(0xb)
        let active = UInt64(0x14)
        let ref_count = UInt64(0x10)
        let vm_map = UInt64(0x28)
        let itk_self = UInt64(0xF8)
        let itk_sself = UInt64(0x108)
        let itk_bootstrap = UInt64(0x2A8)
        let itk_space = UInt64(0x320)
        
#if __arm64e__
        let bsd_info = UInt64(0x388)
        let flags = UInt64(0x428)
#else
        let bsd_info = UInt64(0x380)
        let flags = UInt64(0x3B8)
#endif
        let prev = UInt64(0x38)
    }
    let task = taskOffsets()
    
    public struct ipcPortOffsets {
        let io_bits = UInt64(0x00)
        let io_references = UInt64(0x04)
        let ip_mscount = UInt64(0x9C)
        let ip_receiver = UInt64(0x60)
        let ip_srights = UInt64(0xa0)
        let ip_kobject = UInt64(0x68)
    }
    let ipc_port = ipcPortOffsets()
    
    public struct apfsDataOffsets {
        let flag = UInt64(0x31)
    }
    let apfsData = apfsDataOffsets()
    
    public struct vnodeOffsets {
        let ncchildren = UInt64(0x30)
        let flag = UInt64(0x54)
        let type = UInt64(0x70)
        let id = UInt64(0x74)
        let ubcinfo = UInt64(0x78)
        let specinfo = UInt64(0x78)
        let name = UInt64(0xb8)
        let parent = UInt64(0xc0)
        let mount = UInt64(0xd8)
        let data = UInt64(0xe0)
    }
    let vnode = vnodeOffsets()
    
    public struct specinfoOffsets {
        let flags = UInt64(0x10)
    }
    let specinfo = specinfoOffsets()
    
    public struct mountOffsets {
        let mnt_next = UInt64(0x0)
        let vnodelist = UInt64(0x40)
        let flag = UInt64(0x70)
        let data = UInt64(0x8f8)
        let devvp = UInt64(0x980)
    }
    let mount = mountOffsets()
    
    public struct namecacheOffsets {
        let nc_child = UInt64(0x10)
        let name = UInt64(0x58)
        let dvp = UInt64(0x40)
        let vp = UInt64(0x48)
    }
    let namecache = namecacheOffsets()
    
    public struct osObjOffsets {
        let os_string_string = UInt64(0x10)
        let os_dict_count = UInt64(0x14)
        let os_dict_dict_entry = UInt64(0x20)
    }
    let osobject = osObjOffsets()
    
    public struct nvramOffsets {
        let sha384_digest_length = 48
        
        let ap_nonce_generate_nonce_sel = UInt32(0xC8)
        let ap_nonce_boot_nonce_os_symbol = UInt64(0xC0)
        
        let io_dt_nvram_of_dict = UInt64(0xC0)
    }
    let nvram = nvramOffsets()
}
