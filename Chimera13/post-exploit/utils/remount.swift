//
//  remount.swift
//  Chimera13
//
//  Created by CoolStar on 3/1/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation

public class Remount {
    let our_proc: UInt64
    let kernel_proc: UInt64
    
    init(our_proc: UInt64, kernel_proc: UInt64){
        self.our_proc = our_proc
        self.kernel_proc = kernel_proc
    }
    
    private let offsets = Offsets.shared
    
    let mntpathSW = "/var/rootfsmnt"
    let mntpath = strdup("/var/rootfsmnt")
    
    public func findRootVnode(launchd_proc: UInt64) -> UInt64 {
        let textvp = rk64(launchd_proc + offsets.proc.textvp)
        var nameptr = rk64(textvp + offsets.vnode.name)
        var name = [UInt8](repeating: 0, count:20)
        kread(nameptr, &name, 20)
        
        print("found vnode: ", String(cString: &name))
        
        let sbin = rk64(textvp + offsets.vnode.parent)
        nameptr = rk64(sbin + offsets.vnode.name)
        kread(nameptr, &name, 20)
        
        print("found vnode (should be sbin): ", String(cString: &name))
        
        let rootvnode = rk64(sbin + offsets.vnode.parent)
        nameptr = rk64(rootvnode + offsets.vnode.name)
        kread(nameptr, &name, 20)
        
        print("found vnode (should be root): ", String(cString: &name))
        
        let flags = rk32(rootvnode + offsets.vnode.flag)
        print(String(format:"vnode flags: 0x%x", flags))
        
        return rootvnode
    }
    
    public func mountRealRootfs(rootvnode: UInt64) -> Int32 {
        if FileManager.default.fileExists(atPath: mntpathSW) {
            try? FileManager.default.removeItem(atPath: mntpathSW)
        }
        
        mkdir(mntpath, 0755)
        chown(mntpath, 0, 0)
        
        let vmount = rk64(rootvnode + offsets.vnode.mount)
        let dev = rk64(vmount + offsets.mount.devvp)
        
        let nameptr = rk64(dev + offsets.vnode.name)
        var name = [UInt8](repeating: 0, count:20)
        kread(nameptr, &name, 20)
        print("found dev vnode name: ", String(cString: &name))
        
        let specinfo = rk64(dev + offsets.vnode.specinfo)
        let flags = rk32(specinfo + offsets.specinfo.flags)
        print("found dev flags: ", flags)
        
        wk32(specinfo + offsets.specinfo.flags, 0)
        
        let kern_ucred = rk64(kernel_proc + offsets.proc.ucred)
        let our_ucred = rk64(our_proc + offsets.proc.ucred)
        
        wk64(our_proc + offsets.proc.ucred, kern_ucred)
        
        let fspec = strdup("/dev/disk0s1s1")
        
        var mntargs = hfs_mount_args()
        mntargs.fspec = fspec
        mntargs.hfs_mask = 1
        gettimeofday(nil, &mntargs.hfs_timezone)
        
        let retval = mount("apfs", mntpath, 0, &mntargs)
        
        free(fspec)
        
        wk64(our_proc + offsets.proc.ucred, our_ucred)
        
        print("mount completed with status ", retval)
        
        return retval
    }
    
    public func findNewMount(rootvnode: UInt64) -> UInt64 {
        var vmount = rk64(rootvnode + offsets.vnode.mount)
        
        vmount = rk64(vmount + offsets.mount.mnt_next)
        while vmount != 0 {
            let dev = rk64(vmount + offsets.mount.devvp)
            if dev != 0 {
                let nameptr = rk64(dev + offsets.vnode.name)
                var name = [UInt8](repeating: 0, count:20)
                kread(nameptr, &name, 20)
                let devName = String(cString: &name)
                print("found dev vnode name: ", devName)
                
                if devName == "disk0s1s1" {
                    return vmount
                }
            }
            
            vmount = rk64(vmount + offsets.mount.mnt_next)
        }
        return 0
    }
    
    public func unsetSnapshotFlag(newmnt: UInt64) -> UInt64 {
        let dev = rk64(newmnt + offsets.mount.devvp)
        
        let nameptr = rk64(dev + offsets.vnode.name)
        var name = [UInt8](repeating: 0, count:20)
        kread(nameptr, &name, 20)
        print("found dev vnode name: ", String(cString: &name))
        
        let specinfo = rk64(dev + offsets.vnode.specinfo)
        let flags = rk32(specinfo + offsets.specinfo.flags)
        print("found dev flags: ", flags)
        
        var vnodelist = rk64(newmnt + offsets.mount.vnodelist);
        while (vnodelist != 0){
            print("vnodelist: ", vnodelist)

            let nameptr = rk64(vnodelist + offsets.vnode.name)
            let len = Int(kstrlen(nameptr))
            var name = [UInt8](repeating: 0, count:len)
            kread(nameptr, &name, len)
            
            let vnodeName = String(cString: &name)
            print("found vnode name: ", vnodeName)
            
            if vnodeName.hasPrefix("com.apple.os.update-") {
                let vdata = rk64(vnodelist + offsets.vnode.data)
                
                let flag = rk32(vdata + offsets.apfsData.flag)
                print("found apfs flag: ", flag)
                
                if (flag & 0x40) != 0 {
                    wk32(vdata + offsets.apfsData.flag, flag & ~0x40)
                }
            }
            
            usleep(1000)
            vnodelist = rk64(vnodelist + UInt64(0x20))
        }
        return 0
    }
}
